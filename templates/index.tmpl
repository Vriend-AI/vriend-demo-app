<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Demo App | Vriend</title>
    <link rel="stylesheet" href="/public/styles.css">
  </head>
  <body>
    <!-- Alpine.js App with proper cloak handling -->
    <div
      id="app"
      x-data="authApp()"
      x-init="init(); $nextTick(() => document.body.classList.add('alpine-ready'))"
      class="alpine-content"
      x-cloak
    >
      <!-- Loading State -->
      <div x-show="isLoading" class="container">
        <div class="spinner"></div>
        <p>Checking authentication...</p>
      </div>

      <!-- Login Screen -->
      <div x-show="!isAuthenticated && !isLoading" class="container">
        <h1 class="title">Welcome to the Demo App</h1>
        <p class="subtitle">Please sign in to continue.</p>
        <p>
          <a :href="loginURL" class="signin-btn" rel="noopener">
            <img
              src="https://cdn.vriend.ai/images/vriend-icon-white.png"
              alt="Vriend Inc. Icon"
              @error="$event.target.style.display='none'"
            />
            <span>
              Sign in with
              <em style="font-style: normal; font-weight: 800">Vriend ID</em>
            </span>
          </a>
        </p>
      </div>

      <!-- Authenticated Screen -->
      <div x-show="isAuthenticated && !isLoading" class="container">
        <!-- Header with logout button -->
        <div class="container-header">
          <button class="btn-logout-header" @click="logout()">Logout</button>
        </div>
        
        <h1 class="title">Welcome, you are logged in!</h1>
        <p class="subtitle">You now have access to protected resources.</p>

        <!-- Tabs -->
        <div class="tabs-container">
          <div class="tab-buttons">
            <button
              class="tab-button"
              :class="{ active: activeTab === 'info' }"
              @click="setActiveTab('info')"
            >
              User Info
            </button>
            <button
              class="tab-button"
              :class="{ active: activeTab === 'stress' }"
              @click="setActiveTab('stress')"
            >
              Stress Levels
            </button>
          </div>

          <!-- Info Tab Content -->
          <div class="tab-content" :class="{ active: activeTab === 'info' }">
            <div class="api-fetch-section">
              <!-- Section Header -->
              <div class="api-section-header">
                <div class="section-title">
                  <span class="section-icon">‚ÑπÔ∏è</span>
                  <h3>User Information</h3>
                </div>
                <div class="section-actions">
                  <!-- Status indicator -->
                  <div class="api-status" x-show="isLoadingInfo || userInfo || infoError">
                    <div class="status-dot" :class="{
                      'status-loading': isLoadingInfo,
                      'status-success': userInfo && !infoError,
                      'status-error': infoError
                    }"></div>
                    <span class="status-text" x-show="isLoadingInfo">Loading...</span>
                    <span class="status-text" x-show="userInfo && !infoError">Ready</span>
                    <span class="status-text" x-show="infoError">Error</span>
                  </div>
                  
                  <!-- Action buttons -->
                  <div class="action-buttons">
                    <!-- Initial fetch button -->
                    <button
                      x-show="!userInfo && !infoError && !isLoadingInfo"
                      class="btn-action btn-primary"
                      @click="fetchUserInfo()"
                    >
                      <span class="btn-icon">üì•</span>
                      <span>Fetch Data</span>
                    </button>

                    <!-- Refresh button -->
                    <button
                      x-show="(userInfo || infoError) && !isLoadingInfo"
                      class="btn-action btn-secondary"
                      @click="fetchUserInfo()"
                    >
                      <span class="btn-icon">üîÑ</span>
                      <span>Refresh</span>
                    </button>

                    <!-- Loading button -->
                    <button
                      x-show="isLoadingInfo"
                      class="btn-action btn-loading"
                      disabled
                    >
                      <div class="loading-spinner"></div>
                      <span>Loading...</span>
                    </button>
                  </div>
                </div>
              </div>

              <!-- Loading skeleton -->
              <div x-show="isLoadingInfo" class="loading-skeleton"></div>

              <!-- Response container -->
              <div class="api-response-container">
                <div x-show="userInfo" class="api-response success">
                  <div class="response-header">
                    <span class="response-type">User Information</span>
                    <span class="response-timestamp" x-text="new Date().toLocaleTimeString()"></span>
                  </div>
                  <div x-text="JSON.stringify(userInfo, null, 2)"></div>
                </div>
                <div x-show="infoError" class="api-response error">
                  <div class="response-header">
                    <span class="response-type">Request Failed</span>
                    <span class="response-timestamp" x-text="new Date().toLocaleTimeString()"></span>
                  </div>
                  <div x-text="'Error: ' + infoError"></div>
                </div>
              </div>
            </div>
          </div>

          <!-- Stress Levels Tab Content -->
          <div class="tab-content" :class="{ active: activeTab === 'stress' }">
            <div class="api-fetch-section">
              <!-- Section Header -->
              <div class="api-section-header">
                <div class="section-title">
                  <span class="section-icon">üìä</span>
                  <h3>Stress Level Data</h3>
                </div>
                <div class="section-actions">
                  <!-- Status indicator -->
                  <div class="api-status" x-show="isLoadingStress || stressLevels || stressError">
                    <div class="status-dot" :class="{
                      'status-loading': isLoadingStress,
                      'status-success': stressLevels && !stressError,
                      'status-error': stressError
                    }"></div>
                    <span class="status-text" x-show="isLoadingStress">Loading...</span>
                    <span class="status-text" x-show="stressLevels && !stressError">Ready</span>
                    <span class="status-text" x-show="stressError">Error</span>
                  </div>
                  
                  <!-- Action buttons -->
                  <div class="action-buttons">
                    <!-- Initial fetch button -->
                    <button
                      x-show="!stressLevels && !stressError && !isLoadingStress"
                      class="btn-action btn-primary"
                      @click="fetchStressLevels()"
                    >
                      <span class="btn-icon">üìä</span>
                      <span>Fetch Data</span>
                    </button>

                    <!-- Refresh button -->
                    <button
                      x-show="(stressLevels || stressError) && !isLoadingStress"
                      class="btn-action btn-secondary"
                      @click="fetchStressLevels()"
                    >
                      <span class="btn-icon">üîÑ</span>
                      <span>Refresh</span>
                    </button>

                    <!-- Loading button -->
                    <button
                      x-show="isLoadingStress"
                      class="btn-action btn-loading"
                      disabled
                    >
                      <div class="loading-spinner"></div>
                      <span>Loading...</span>
                    </button>
                  </div>
                </div>
              </div>

              <!-- Loading skeleton -->
              <div x-show="isLoadingStress" class="loading-skeleton"></div>

              <!-- Response container -->
              <div class="api-response-container">
                <div x-show="stressLevels" class="api-response success">
                  <div class="response-header">
                    <span class="response-type">Stress Level Data</span>
                    <span class="response-timestamp" x-text="new Date().toLocaleTimeString()"></span>
                  </div>
                  <div x-text="JSON.stringify(stressLevels, null, 2)"></div>
                </div>
                <div x-show="stressError" class="api-response error">
                  <div class="response-header">
                    <span class="response-type">Request Failed</span>
                    <span class="response-timestamp" x-text="new Date().toLocaleTimeString()"></span>
                  </div>
                  <div x-text="'Error: ' + stressError"></div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- JavaScript Dependencies -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="//unpkg.com/alpinejs" defer></script>

    <script>
      // Alpine.js app data and methods
      function authApp() {
        return {
          // State
          isAuthenticated: false,
          isLoading: true,
          userInfo: null,
          stressLevels: null,
          apiError: null,
          infoError: null,
          stressError: null,
          isLoadingInfo: false,
          isLoadingStress: false,
          activeTab: "info",
          loginURL: "{{ .LoginURL }}",

          // API clients
          vriendAPI: axios.create({
            baseURL: "{{ .VriendAPIURL }}",
            headers: { "Content-Type": "application/json" },
            withCredentials: true,
          }),

          localAPI: axios.create({
            baseURL: window.location.origin,
            withCredentials: true,
          }),

          // Methods
          async init() {
            await this.checkAuthStatus();
          },

          async checkAuthStatus() {
            try {
              this.isLoading = true;
              this.apiError = null;

              const response = await this.vriendAPI.get("/info");

              this.userInfo = response.data;
              this.isAuthenticated = true;
            } catch (error) {
              this.isAuthenticated = false;
              this.userInfo = null;
              this.apiError = error.message || "Authentication failed";
            } finally {
              this.isLoading = false;
            }
          },

          setActiveTab(tab) {
            this.activeTab = tab;
          },

          async fetchUserInfo() {
            try {
              this.isLoadingInfo = true;
              this.infoError = null;

              const response = await this.vriendAPI.get("/info");
              this.userInfo = response.data;
            } catch (error) {
              this.userInfo = null;
              this.infoError = error.message || "Failed to fetch user info";
            } finally {
              this.isLoadingInfo = false;
            }
          },

          async fetchStressLevels() {
            try {
              this.isLoadingStress = true;
              this.stressError = null;

              const response = await this.vriendAPI.get(
                "/wellness/stresslevels"
              );
              this.stressLevels = response.data;
            } catch (error) {
              this.stressLevels = null;
              this.stressError =
                error.message || "Failed to fetch stress levels";
            } finally {
              this.isLoadingStress = false;
            }
          },

          async logout() {
            try {
              await this.localAPI.get("/logout");
            } catch (error) {
              console.error("Logout error:", error);
            } finally {
              // Always reset auth state
              this.isAuthenticated = false;
              this.userInfo = null;
              this.stressLevels = null;
              this.apiError = null;
              this.infoError = null;
              this.stressError = null;
              this.isLoadingInfo = false;
              this.isLoadingStress = false;
              this.activeTab = "info";
            }
          },
        };
      }
    </script>

    <!-- Copyright Footer -->
    <div class="copyright">
      &copy; <span id="copyright-year"></span>
      <a href="https://vriend.ai" target="_blank" rel="noopener noreferrer"
        >Vriend Inc.</a
      >
    </div>

    <script>
      // Set current year dynamically
      document.getElementById("copyright-year").textContent =
        new Date().getFullYear();
    </script>
  </body>
</html>
